<script type="text/javascript">
jQuery(document).ready(function($){
  $('.navLink').live('click',function(e){e.preventDefault();})
  var get = Ember.get;
  // Can use with an inner template:
  //{{#answer tagName="span"}}Purpose: {{purpose}}{{/answer}}
  // or just define needed variable to display:
  //{{answer tagName="span" val="purpose"}}
  Ember.Handlebars.registerHelper('answer', function(path, options) {
    return Ember.Handlebars.ViewHelper.helper(this, "BJCP.Answer", path);
  });
  Ember.Handlebars.registerHelper('page', function(path, options) {
    return Ember.Handlebars.ViewHelper.helper(this, "BJCP.QuizPage", path);
  });
  Ember.Handlebars.registerHelper('pageLink', function(path, options) {
    return Ember.Handlebars.ViewHelper.helper(this, "BJCP.PageLink", path);
  });
  Ember.Handlebars.registerHelper('navLink', function(path, options) {
    return Ember.Handlebars.ViewHelper.helper(this, "BJCP.NavigationLink", path);
  });

  BJCP.ClickableView = Ember.View.extend({
    change: function(evt) {
      var i = $('.allStylesAhead').index($(evt.target));
      var citiesWithStyles = BJCP.StyleCompareCities.get('cities');
      var styles = citiesWithStyles[i].get('optionalStyles');
      var enteredVal = $(evt.target).val();

      var match = _.find(styles, function(style){
        return style.style_name === enteredVal;
      });
      citiesWithStyles[i].set('selectedStyle', match);
      var selectedStyles = BJCP.StyleCompareCities.get('styles');
      selectedStyles[i] = Ember.Object.create(match || {});
      selectedStyles = _.map(selectedStyles, function(x){return x;}); // clone, otherwise Ember ignores change
      BJCP.StyleCompareCities.set('styles', selectedStyles);
    }
  });

  BJCP.SampleQuiz = Ember.Object.create({
    showingAnswers: false,
    activePage: 'Intro',
    showAnswerToggle: function(){
      return this.get('activePage') !== 'Intro'
    }.property('activePage')
  });

  BJCP.ShowAnswers = Ember.View.extend({
    click: function(){
      BJCP.SampleQuiz.set('showingAnswers', true);
    }
  });
  BJCP.HideAnswers = Ember.View.extend({
    click: function(){
      BJCP.SampleQuiz.set('showingAnswers', false);
    }
  });
  BJCP.PassThru = Ember.View.extend({
    templateContext: Ember.computed(function(key, value) {
      return Ember.get(this, 'bindingContext');
    }).cacheable(),
    template: Ember.computed(function(key, value) {
      // template only gets called if {{answer}} and not {{#answer}}{{/answer}}
      if (value !== undefined) { return value; }
      var context = get(this, 'templateContext');
      var val = get(this,'val');
      var raw = get(this,'raw'); // literal as-is value
      if(raw) return raw;
      return context.get(get(this,'val')) ||
             get(this, 'defaultTemplate');
    }).property('templateName').cacheable(),
    render: function(buffer) {
      var template = get(this, 'template');
      if (template) {
        var context = get(this, 'templateContext'),
            data = { view: this, buffer: buffer, isRenderData: true };
        var output = (typeof template === 'string') ? template : template(context, { data: data });
        if (output !== undefined) { buffer.push(output); }
      }
    }
  });
  BJCP.Answer = BJCP.PassThru.extend({
    tagName: "div",
    isVisible: function(){
      return BJCP.SampleQuiz.get('showingAnswers');
    }.property('BJCP.SampleQuiz.showingAnswers')
  });
  BJCP.PageLink = Ember.View.extend({
    templateName: "nav-link",
    click: function(){
      var page = BJCP.SampleQuiz.get('activePage');
      var myPage = this.get('myPage');
      if(myPage === 'Next'){
        if(BJCP.SampleQuiz.get('activePage') === 'Intro'){
          BJCP.SampleQuiz.set('activePage', '1');
        }else{
          BJCP.SampleQuiz.set('activePage', ''+(parseInt(page)+1));
        }
      }else{
        BJCP.SampleQuiz.set('activePage', this.get('myPage'));
      }
    },
    linkDisplay: function(){
      return this.get('raw') || this.get('myPage');
    }.property()
  });
  BJCP.NavigationLink = BJCP.PageLink.extend({
    tagName: "li",
    isVisible: function(){
      var page = BJCP.SampleQuiz.get('activePage');
      var myPage = this.get('myPage');
      if(myPage === 'Next' && page === '10') return false
      return true;
    }.property('BJCP.SampleQuiz.activePage'),
    isActive: function(){
      var page = BJCP.SampleQuiz.get('activePage');
      var myPage = this.get('myPage');
      return page === myPage;
    }.property('BJCP.SampleQuiz.activePage'),
    classNameBindings: ['isActive:active']
  });
  BJCP.QuizPage = Ember.View.extend({
    isVisible: function(){
      var page = BJCP.SampleQuiz.get('activePage');
      var myPage = this.get('myPage');
      return page === myPage;
    }.property('BJCP.SampleQuiz.activePage'),
    classNameBindings: ['myPageClass'],
    myPageClass: function(){
      return 'q'+this.get('myPage');
    }.property('BJCP.SampleQuiz.activePage')
  });

  BJCP.AllStyleNames = Ember.Object.create({names: []});
  $.ajax({url: '/styles/all_names',
          data: {},
          success: function(data){
    BJCP.AllStyleNames.set('names', data);
    setTimeout(autoStyleFill,3000);
  }});

  window.autoStyleFill = function(){
    $('.allStylesAhead').typeahead({source: BJCP.AllStyleNames.get('names')});
  };

  BJCP.PillRadio = Ember.View.extend({
    click: function(){
      var $li = this.$().parent('li');
      $li.addClass('active');
      $li.siblings().removeClass('active');
    }
  });

  Ember.View.create({templateName: 'sample-quiz'}).appendTo('.mainArea');
  setupIntro();
  setupPagination();
  setupQ1();
  setupComparisons();
  setupRecipe();
  setupIngBrewProc();
  setupCharacteristics();
  setupClassicExample();
});
</script>
<style>
.questionPage {
  display: none;
}
</style>
<script type="text/x-handlebars" data-template-name="sample-quiz">
<div class="paginationHeader center"></div>
<div class="quizContent">
  {{page myPage="Intro"}}
  {{page myPage="1"}}<!-- Purpose, Levels, TF -->
  {{page myPage="2"}}<!-- Compare Styles -->
  {{page myPage="3"}}<!-- All-Grain Recipe -->
  {{page myPage="4"}}<!-- Compare Styles -->
  {{page myPage="5"}}<!-- Characteristics -->
  {{page myPage="6"}}<!-- Three Cities -->
  {{page myPage="7"}}<!-- Ingredients -->
  {{page myPage="8"}}<!-- Compare Styles -->
  {{page myPage="9"}}<!-- Brewing Process -->
  {{page myPage="10"}}
</div>
<div class="paginationFooter center"></div>
</script>
<%= render 'pagination' %>
<%= render 'intro' %>
<%= render 'q1' %>
<%= render 'qCompare' %>
<%= render 'qRecipe' %>
<%= render 'qCharacteristics' %>
<%= render 'qIngBrewProc' %>
<%= render 'qClassicExample' %>
<script type="text/x-handlebars" data-template-name="nav-link">
  <a href="#" class="navLink">{{linkDisplay}}</a>
</script>
